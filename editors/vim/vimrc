set nocompatible

source ~/.vim/plugins.vim

let mapleader=" "
let g:mapleader=" "
set noshowmode          " Don't show mode, as it is shown by LightLine.vim
set shortmess+=I        " Don't show the Vim welcome screen.
set shortmess+=c        " Don't give |ins-completion-menu| messages
set clipboard=unnamedplus " use system clipboard with * register

set autoindent          " Copy indent from current line for new line.
set nosmartindent       " 'smartindent' breaks right-shifting of # lines.

set hidden              " Keep changed buffers without requiring saves.

set history=5000        " Remember this many command lines.

set ruler               " Always show the cursor position.
set showcmd             " Display incomplete commands.
set incsearch           " Do incremental searching.
set hlsearch            " Highlight latest search pattern.
set number              " Display line numbers.
set relativenumber      " show line numbers centred around the current line
set numberwidth=4       " Minimum number of columns to show for line numbers.
set laststatus=2        " Always show a status line.
set visualbell t_vb=    " Use null visual bell (no beeps or flashes).

set scrolloff=3         " Context lines at top and bottom of display.
set sidescrolloff=5     " Context columns at left and right.
set sidescroll=1        " Number of chars to scroll when scrolling sideways.

set nowrap              " Don't wrap the display of long lines.
set linebreak           " Wrap at 'breakat' char vs display edge if 'wrap' on.
set display=lastline    " Display as much of a window's last line as possible.

set expandtab           " Insert spaces for <Tab> press; use spaces to indent.
set smarttab            " Tab respects 'shiftwidth', 'tabstop', 'softtabstop'.
set tabstop=2           " Set the visible width of tabs.
set softtabstop=2       " Edit as if tabs are 2 characters wide.
set shiftwidth=2        " Number of spaces to use for indent and unindent.
set shiftround          " Round indent to a multiple of 'shiftwidth'.

set ignorecase          " Ignore case for pattern matches (\C overrides).
set smartcase           " Override 'ignorecase' if pattern contains uppercase.
set wrapscan          " Don't allow searches to wrap around EOF.

set nocursorline        " Don't highlight the current screen line...
set nocursorcolumn      " ...or screen column...
set colorcolumn=        " ...or margins (but see toggle_highlights.vim).

set virtualedit=block   " Allow virtual editing when in Visual Block mode.

set foldcolumn=3        " Number of columns to show at left for folds.
set foldnestmax=3       " Only allow 3 levels of folding.
set foldlevelstart=99   " Start with all folds open.

set whichwrap+=<,>,[,]  " Allow left/right arrows to move across lines.

set nojoinspaces        " Don't get fancy with the spaces when joining lines.
set textwidth=0         " Don't auto-wrap lines except for specific filetypes.


" Turn 'list' off by default, since it interferes with 'linebreak' and
" 'breakat' formatting (and it's ugly and noisy), but define characters to use
" when it's turned on.

set nolist
set listchars =tab:>-           " Start and body of tabs
set listchars +=trail:.          " Trailing spaces
set listchars +=extends:>        " Last column when line extends off right
set listchars +=precedes:<       " First column when line extends off left
set listchars +=eol:$            " End of line

set backspace=indent,eol,start  " Backspace over everything in Insert mode

set noshowmatch                 " Don't jump to matching characters
set matchpairs=(:),[:],{:},<:>  " Character pairs for use with %, 'showmatch'
set matchtime=1                 " In tenths of seconds, when showmatch is on

set wildmenu                    " Use menu for completions
set wildmode=full


if has("win32")
  set grepprg=internal        " Windows findstr.exe just isn't good enough.
endif

" Enable mouse support if it's available.
"
if has('mouse')
  set mouse=a
endif

if has("unix") " (including OS X)
  if has("nvim")
    set nobackup
  else
    set backup

    " Remove the current directory from the backup directory list.
    "
    set backupdir-=.

    " Save backup files in the current user's ~/tmp directory, or in the
    " system /tmp directory if that's not possible.
    "
    set backupdir^=~/tmp,/tmp

    " Try to put swap files in ~/tmp (using the munged full pathname of
    " the file to ensure uniqueness). Use the same directory as the
    " current file if ~/tmp isn't available.
    "
    set directory=~/tmp//,.
  endif
else
  set directory=$TEMP\\\
endif

" Update the swap file every 20 characters. I don't like to lose stuff.
set updatecount=20

" Switch on syntax highlighting when the terminal has colors, or when running
" in the GUI. Set the do_syntax_sel_menu flag to tell $VIMRUNTIME/menu.vim
" to expand the syntax menu.
"
" Note: This happens before the 'Autocommands' section below to give the syntax
" command a chance to trigger loading the menus (vs. letting the filetype
" command do it). If do_syntax_sel_menu isn't set beforehand, the syntax menu
" won't get populated.
"
if &t_Co > 2 || has("gui_running")
  let do_syntax_sel_menu=1
  syntax on
endif

if has("autocmd") && !exists("autocommands_loaded")

  " Set a flag to indicate that autocommands have already been loaded,
  " so we only do this once. I use this flag instead of just blindly
  " running `autocmd!` (which removes all autocommands from the
  " current group) because `autocmd!` breaks the syntax highlighting /
  " syntax menu expansion logic.
  "
  let autocommands_loaded = 1

  " Enable filetype detection, so language-dependent plugins, indentation
  " files, syntax highlighting, etc., are loaded for specific filetypes.
  "
  " Note: See $HOME/.vim/ftplugin and $HOME/.vim/after/ftplugin for
  " most local filetype autocommands and customizations.
  "
  filetype on
  syntax on
  filetype plugin indent on

  " When editing a file, always jump to the last known cursor
  " position. Don't do it when the position is invalid or when inside
  " an event handler (happens when dropping a file on gvim).
  "
  autocmd BufReadPost *
      \   if line("'\"") > 0 && line("'\"") <= line("$") |
      \       exe "normal g`\"" |
      \   endif

  " Create the hook for the per-window configuration. Both WinEnter
  " and VimEnter are used, since WinEnter doesn't fire for the first
  " window.
  "
  " Based on ideas from here:
  " http://vim.wikia.com/wiki/Detect_window_creation_with_WinEnter
  "
  autocmd WinEnter,VimEnter * call s:ConfigureWindow()

  " Resize Vim windows to equal heights and widths when Vim itself
  " is resized.
  "
  autocmd VimResized * wincmd =

  " Open quickfix and fugitive's git commit windows at full horizontal
  " width. Via http://nosubstance.me/articles/2013-09-21-my-vim-gems/
  "
  autocmd FileType qf,gitcommit wincmd J

  " Treat buffers from stdin (e.g.: echo foo | vim -) as scratch buffers.
  "
  autocmd StdinReadPost * :set buftype=nofile

  augroup vimrcEx
    autocmd!

    autocmd BufRead,BufNewFile	*.build		setfiletype xml
    autocmd BufRead,BufNewFile	*.targets	setfiletype xml
    autocmd BufRead,BufNewFile	*.nunit		setfiletype xml
    autocmd BufRead,BufNewFile	*.config	setfiletype xml
    autocmd BufRead,BufNewFile	*.xaml		setfiletype xml
    autocmd BufRead,BufNewFile	*.DotSettings		setfiletype xml

    autocmd FocusLost * silent! :wa
  augroup END

endif " has("autocmd")


"""
""" Key mappings
"""

" Set 'selection', 'selectmode', 'mousemodel' and 'keymodel' to make
" both keyboard- and mouse-based highlighting behave more like Windows
" and OS X. (These are the same settings you get with `:behave mswin`.)
"
" Note: 'selectmode', 'keymodel', and 'selection' are also set within
" map_movement_keys.vim, since they're critical to the behavior of those
" mappings (although they should be set to the same values there as here.)
"
" Note: Under MacVim, `:let macvim_hig_shift_movement = 1` will cause MacVim
" to set selectmode and keymodel. See `:help macvim-shift-movement` for
" details.
"
set selectmode=mouse,key
set keymodel=startsel,stopsel
set selection=exclusive
set mousemodel=popup

" Backspace in Visual mode deletes selection.
"
vnoremap <BS> d

" Map Control+Up/Down to move lines and selections up and down.
"
" runtime map_line_block_mover_keys.vim
" runtime map_highlighting_keys.vim
" runtime vim-fireplace-mappings.vim

" Disable paste-on-middle-click.
"
map  <MiddleMouse>    <Nop>
map  <2-MiddleMouse>  <Nop>
map  <3-MiddleMouse>  <Nop>
map  <4-MiddleMouse>  <Nop>
imap <MiddleMouse>    <Nop>
imap <2-MiddleMouse>  <Nop>
imap <3-MiddleMouse>  <Nop>
imap <4-MiddleMouse>  <Nop>

" Center the display line after searches. (This makes it *much* easier to see
" the matched line.)
"
" More info: http://www.vim.org/tips/tip.php?tip_id=528
"
nnoremap n   nzz
nnoremap N   Nzz
nnoremap *   *zz
nnoremap #   #zz
nnoremap g*  g*zz
nnoremap g#  g#zz

" Edit user's vimrc and gvimrc in new tabs.
if has("nvim")
  nnoremap <leader>ev :tabe ~/.vimrc<CR>
else
  nnoremap <Leader>ev :tabe $MYVIMRC<CR>
endif

nnoremap <Leader>ep  :tabe ~/.vim/plugins.vim<CR>:tabe ~/.vim/plugins_shared.vim<CR>

" Reload vimrc
nnoremap <Leader>lv  :so $MYVIMRC<CR>

" Make page-forward and page-backward work in insert mode.
"
inoremap <C-F>  <C-O><C-F>
inoremap <C-B>  <C-O><C-B>

" Overload Control+L to clear the search highlight as it's redrawing the screen.
"
nnoremap <silent> <C-l> :nohlsearch<CR><C-L>
inoremap <silent> <C-l> <Esc>:nohlsearch<CR><C-L>a
vnoremap <silent> <C-l> <Esc>:nohlsearch<CR><C-L>gv

" Keep the working line in the center of the window. This is a toggle, so you
" can bounce between centered-working-line scrolling and normal scrolling by
" issuing the keystroke again.
"
" From this message on the MacVim mailing list:
" http://groups.google.com/group/vim_mac/browse_thread/thread/31876ef48063e487/133e06134425bda1?hl=enÂ¿e06134425bda1
"
nnoremap <Leader>zz  :let &scrolloff=999-&scrolloff<CR>

" Toggle wrapping the display of long lines (and display the current 'wrap'
" state once it's been toggled).
"
nnoremap <Leader>w  :set invwrap<BAR>set wrap?<CR>

"
" Make it easy to :Tabularize
"
nmap <leader>aa :Tabularize /\|/l0<cr>
vmap <leader>aa :Tabularize /\|/l0<cr>

" Make the dot command operate over a Visual range.
" (Excellent tip from Drew Neil's Vim Masterclass.)
"
xnoremap .  :normal .<CR>

" Shortcuts to commonly-used fugitive.vim features
"
nnoremap <Leader>gs  :Gstatus<CR>
nnoremap <Leader>gd  :Gdiff<CR>


"""
""" Abbreviations
"""

runtime set_abbreviations.vim

" silent! colorscheme gruvbox
" set background=dark
silent! colorscheme nord

if exists(":RainbowParenthesesToggle")
  au VimEnter * RainbowParenthesesToggle
  au Syntax * RainbowParenthesesLoadRound
  au Syntax * RainbowParenthesesLoadSquare
  au Syntax * RainbowParenthesesLoadBraces
endif


"""
""" Local Functions
"""

function! s:ConfigureWindow()

    " Only do this once per window.
    "
    if exists('w:windowConfigured')
        return
    endif

    let w:windowConfigured = 1

    " Highlight trailing whitespace, except when typing at the end of a line.
    " More info: http://vim.wikia.com/wiki/Highlight_unwanted_spaces
    "
    " XXX: Disabled for now, since it's distracting during demos and classes.
    "
    call matchadd('NonText', '\s\+\%#\@<!$')

    " Highlight the usual to-do markers
    " even if the current syntax highlighting doesn't include them.
    "
    call matchadd('Todo', 'XXX')
    call matchadd('Todo', 'BUG')
    call matchadd('Todo', 'HACK')
    call matchadd('Todo', 'FIXME')
    call matchadd('Todo', 'TODO')
endfunction

nnoremap <silent> <leader><Tab> :tabNext<cr>

let g:UltiSnipsSnippetsDir = "~/.vim/UltiSnips"
let g:UltiSnipsSnippetDirectories = [ "UltiSnips" ]
let g:UltiSnipsEditSplit='vertical'
let g:UltiSnipsUsePythonVersion = 3

" next buffer
noremap <leader>bn :bn<cr>
" previous buffer
noremap <leader>bp :bp<cr>
" delete current buffer
noremap <leader>bd :bd<cr>
noremap <leader>bq :bd<cr>

set t_Co=256
highlight clear SignColumn

if (&term =~ '256color') || (&term == 'nvim')
  " disable Background Color Erase (BCE) so that color schemes
  " render properly when inside 256-color tmux and GNU screen.
  " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
  hi Normal guibg=NONE ctermbg=NONE
endif

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

map q: :q

command! SetIndent2Spaces set nopi shiftwidth=2 softtabstop=2
command! SetIndent4Spaces set nopi shiftwidth=4 softtabstop=4

map <leader>i2 :SetIndent2Spaces<CR>
map <leader>i4 :SetIndent4Spaces<CR>

noremap < <<
noremap > >>

" toggle folds
nnoremap <leader>mm za
vnoremap <leader>mm za

" comment block or line
map <leader># gcc

" escape insertmode quickly
inoremap jj <Esc>
inoremap jk <Esc>

" GitGutter related
highlight GitGutterAdd ctermfg=darkgreen
highlight GitGutterChange ctermfg=darkyellow
highlight GitGutterDelete ctermfg=darkred
highlight GitGutterChangeDelete ctermfg=darkyellow
highlight SignColumn ctermbg=black

map <leader>gg :GitGutterToggle<CR>
map <leader>gp :GitGutterPreviewHunk<CR>
map <leader>gr :GitGutterRevertHunk<CR>

set completeopt=longest,menuone,preview

" C-d duplicates line or visual selection (cursor stays in position in normal and insert mode)
nmap <silent> <C-d> mg""yy""p`g:delm g<cr>
imap <silent> <C-d> <C-O>mg<C-O>""yy<C-O>""p<C-O>`g<C-O>:delm g<cr>
vmap <silent> <C-d> ""y<up>""p

let g:vim_markdown_formatter = 1
let g:vim_markdown_folding_level = 3
let g:vim_markdown_folding_disabled = 1

" Disable ex mode
:map Q <Nop>

function! PrettyPrintJSON()
  :%!python -m json.tool
endfunction

autocmd FileType json nnoremap <leader>pp :call PrettyPrintJSON()<CR>

nnoremap <leader>. :NERDTreeToggle<cr>
nnoremap <leader>/ :NERDTreeFind<cr>

let g:NERDTreeWinSize = '40'
let g:NERDTreeMapOpenVSplit = 's'
let g:NERDTreeMapOpenSplit = 'i'
let g:NERDTreeMapCloseChildren = 'X' " Recursively closes all children of the selected directory.
let g:NERDTreeMapJumpRoot = 'P'     " Jump to the tree root.
let g:NERDTreeMapJumpParent = 'p'   " Jump to the parent node of the selected node.
let g:NERDTreeMapChdir = 'C'        " Make the selected directory node the new tree root
let g:NERDTreeMapUpdir = 'u'        " Move the tree root up a dir (like doing a 'cd ..').
let g:NERDTreeMapUpdirKeepOpen = 'U' " Like 'u' but leave old tree root open
let g:NERDTreeMapToggleHidden = 'I' " Toggles whether hidden files are displayed.

" leave vim if NERDTree is the last buffer
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Setup Rainbow parentheses for clojure
autocmd BufEnter *.cljs,*.clj,*.cljs.hl setlocal iskeyword+=?,-,*,!,+,/,=,<,>,.,:

autocmd BufEnter *.fish set ft=fish

" Reload .vimrc on saving
autocmd BufWritePost $MYVIMRC source $MYVIMRC

" Configuration for dhruvasagar/vim-table-mode
" Make markdown compatible tables
let g:table_mode_corner='|'

if &shell =~# 'fish$'
  set shell=sh
endif

if has("unix")
  let s:uname = system("uname")
  if s:uname == "Darwin\n"
    if has("nvim")
      set termguicolors
    endif
  endif
endif

if &diff
  set diffopt+=iwhite " ignore whitespace on diff
  set cursorline
  map < ]c
  map > [c
  nmap d+ ]c
  nmap d- [c
  nmap <leader>+ ]c
  nmap <leader>- [c
  nmap <leader>p dp
  nmap <leader>o do
endif

autocmd BufWritePost ~/.dotfiles/scripts/folders,~/.dotfiles/scripts/configs !bash ~/.dotfiles/scripts/shortcuts.sh

" set pyxversion=3
set encoding=utf-8

let g:sonicpi_command = 'sonic-pi-tool'
let g:sonicpi_send = 'eval-stdin'
let g:sonicpi_stop = 'stop'
let g:sonicpi_keymaps_enabled = 1
let g:vim_redraw = 1

" Split handling
set splitright          " Split new vertical windows right of current window.
set splitbelow          " Split new horizontal windows under current window.

set winminheight=0      " Allow windows to shrink to status line.
set winminwidth=0       " Allow windows to shrink to vertical separator.

nnoremap <silent> <leader>v :vsplit<cr>
nnoremap <silent> <leader>s :split<cr>
nnoremap <silent> <leader>o :only<cr>
nnoremap <silent> <leader>q :q<cr>

nnoremap h <C-W>h
nnoremap j <C-W>j
nnoremap k <C-W>k
nnoremap l <C-W>l

nnoremap H <C-W>H
nnoremap J <C-W>J
nnoremap K <C-W>K
nnoremap L <C-W>L


let g:polyglot_disabled = ['latex']
let g:vimtex_compiler_progname = 'nvr'

" Lightline
source ~/.vim/lightline.vim

" coc.nvim
source ~/.vim/coc.vim

