snippet "^lambda" "Prints my logo" rbA
# -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
#
#                .:-\`
#              \`+oooo\`
#              +-  :o+
#                   /o-
#                   .oo\`
#                   /oo:                dP                         oo
#                  \`oo+o\`               88
#                  :o:.o/      88d888b. 88d888b. .d8888b. 88d888b. dP .d8888b.
#                 \`oo\` /o.     88'  \`88 88'  \`88 88'  \`88 88'  \`88 88 88'  \`""
#                 :o+  \`oo\` \`  88.  .88 88    88 88.  .88 88    88 88 88.  ...
#         -/++++:.oo-   :oo++  88Y888P' dP    dP \`88888P' dP    dP dP \`88888P'
#        ++-..-:/ooo\`    .-.   88
#     \`--o+:------o+--\`        dP       http://lambdaphonic.de
#        \`/oo+///++\`
#           .-::-\`               Made with Sonic Pi (http://sonic-pi.net)
#
# -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-

$0
endsnippet

snippet "^bd" "Base drum loop" rbA
live_loop :drums, sync: :clock1 do
	tick
	sample :bd_haus if spread(4, 16).look
	$0
	sleep 0.25
end
endsnippet

snippet "^boot" "Bootstrapping" rbA
\$port = ${1:\$circuit_port}

set(:root, ${2::G4})
set(:tonic, ${3::dorian})

use_bpm ${4:120}
set_sched_ahead_time! 0.87
set_audio_latency! 5.33

live_audio :in, amp: 1.5, stereo: true

live_loop :clocks, auto_cue: false do
	cue ("clock" + (tick % 8).to_s).to_sym
	#midi_clock_beat port: $port
	sleep 1
end

$0
endsnippet

snippet "^clocks" "Clocks setup for SonicPi" rbA
live_loop :clocks, auto_cue: false do
	cue ("clock" + (tick % 8).to_s).to_sym
	sleep 1
end

$0
endsnippet

snippet "^\s*echo" "Echo fx" rbA
with_fx(:echo, decay: 2.0, mix: 1.0, phase: 0.25) do
	$0
end
endsnippet

snippet "^\s*fx" "Generic FX" rbA
with_fx(:$1) do
	$0
end
endsnippet

snippet "^ll" "Live loop" rb
live_loop :$1 do
	$0
end
endsnippet

snippet "^ll1"  "Live loop on Beat 1" rbA
live_loop :$1, sync: :clock1 do
	$0
end
endsnippet

snippet "^ll5"  "Live loop on Beat 5" rbA
live_loop :$1, sync: :clock5 do
	$0
end
endsnippet

snippet "^markov" "Simple Markov chain setup" rbA
chain = {
	:i => [ :iv ],
	:iv => [ :v ],
	:v => [ :i ]
}

$0
endsnippet

snippet "^metropolism" "Metropolis inspired sequencer for modular" rbA
seq = cur_scale num_octaves: 1
steps = ${0:8}
pulse_counts = ring(1)
types = ring(:repeat)
dur = 0.125
with_fx :level, amp: 0 do
	norm_seq = seq.take steps
	norm_pulses = pulse_counts.take steps
	norm_types = types.take steps
	steps.times do
		idx = tick
		current_note = norm_seq[idx]
		pulse_count = norm_pulses[idx]
		type = norm_types[idx]
		case type
			when :repeat
				pulse_count.times do
					m current_note, sustain: dur * 0.75
					sleep dur
				end
			when :hold
				m current_note, sustain: pulse_count * dur
				sleep (pulse_count * dur)
			when :tick
				m current_note, sustain: dur
				sleep (pulse_count * dur)
			when :sleep
				sleep (pulse_count * dur)
		end
	end
end
endsnippet

snippet "^metropolis" "Metropolis inspired sequencer" rb
seq = cur_scale num_octaves: 1
steps = 8
pulse_counts = ring(1)
types = ring(:repeat)
slides = bools(0)
dur = 0.125

with_fx :level, amp: ${1:0} do
	norm_seq = seq.take steps
	norm_pulses = pulse_counts.take steps
	norm_types = types.take steps
	norm_slides = slides.take steps
	s = play norm_seq[0], amp: 0, sustain: dur * norm_pulses.to_a.sum, release: dur
	steps.times do
		idx = tick
		current_note = norm_seq[idx]
		pulse_count = norm_pulses[idx]
		type = norm_types[idx]
		is_slide = norm_slides[idx + 1]
		case type
			when :repeat
				pulse_count.times do
					control s, amp: 1, note: current_note
					sleep dur / 2
					control s, amp: 0
					sleep dur / 2
				end
			when :hold
				control s, amp: 1, note: current_note
				sleep pulse_count * dur
				control s, amp: 0
			when :tick
				control s, amp: 1, note: current_note
				sleep dur / 2
				control s, amp: 0
				sleep (pulse_count * dur) - (dur / 2)
			when :sleep
				control s, amp: 0
				sleep pulse_count * dur
		end

		if is_slide then
			control s, note_slide: dur / 2
		else
			control s, note_slide: 0
		end
	end
end
endsnippet



snippet pi
pis="31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572"
\$pi=pis.split("").map \{ |v| v.to_i \}.ring

$0
endsnippet

snippet "^\s*reverb" "Reverb FX" rbA
with_fx(:reverb, room: 0.6, mix: 0.4, damp: 0.5) do
	$0
end
endsnippet

snippet "^liv+" "Live audio" rbA
with_fx(:reverb, room: 0.8, mix: 0.7, damp: 0.5) do
	live_audio :volcas, input: 1, amp: 1.5
end

live_audio :modular, input: 2, amp: 1.5

$0
endsnippet

snippet "^live" "Live audio" rbA
live_audio :in, stereo: true, amp: 1.5

$0
endsnippet


snippet "^doriangray" "Quotes from Dorian Gray" rbA
doriangray =
	["The books that the world calls immoral are books that show the world its own shame.",
		"You will always be fond of me.\nI represent to you all the sins you never had the courage to commit.",
		"Experience is merely the name men gave to their mistakes.",
		"Those who find ugly meanings in beautiful things are corrupt without being charming.\nThis is a fault.\nThose who find beautiful meanings in beautiful things are the cultivated.\nFor these there is hope.\nThey are the elect to whom beautiful things mean only Beauty.\nThere is no such thing as a moral or an immoral book.\nBooks are well written, or badly written.\nThat is all.",
		"I don't want to be at the mercy of my emotions.\nI want to use them, to enjoy them, and to dominate them.",
		"The only way to get rid of temptation is to yield to it.",
		"To define is to limit.",
		"There is only one thing in the world worse than being talked about, and that is not being talked about.",
		"Nowadays people know the price of everything and the value of nothing.",
		"I am too fond of reading books to care to write them.",
		"When one is in love, one always begins by deceiving one's self, and one always ends by deceiving others.\nThat is what the world calls a romance.",
		"Children begin by loving their parents; as they grow older they judge them;\nsometimes they forgive them.",
		"Behind every exquisite thing that existed, there was something tragic.",
		"Humanity takes itself too seriously. It is the world's original sin.\nIf the cave-man had known how to laugh, History would have been different.",
		"Nowadays most people die of a sort of creeping common sense, and discover when it is too late that the only things one never regrets are one's mistakes.",
		"Nothing can cure the soul but the senses, just as nothing can cure the senses but the soul.",
		"Words! Mere words! How terrible they were!\nHow clear, and vivid, and cruel!\nOne could not escape from them.\nAnd yet what a subtle magic there was in them!\nThey seemed to be able to give a plastic form to formless things, and to have a music of their own as sweet as that of viol or of lute.\nMere words!\nWas there anything so real as words?",
		"Live! Live the wonderful life that is in you!\nLet nothing be lost upon you.\nBe always searching for new sensations.\nBe afraid of nothing.",
		"Some things are more precious because they don't last long.",
		"Laughter is not at all a bad beginning for a friendship, and it is by far the best ending for one.",
		"Every portrait that is painted with feeling is a portrait of the artist,\nnot of the sitter.",
		"Whenever a man does a thoroughly stupid thing, it is always from the noblest motives.",
		"The world is changed because you are made of ivory and gold.\nThe curves of your lips rewrite history.",
		"There is no such thing as a moral or an immoral book.\nBooks are well written, or badly written.\nThat is all.",
		"You must have a cigarette.\nA cigarette is the perfect type of a perfect pleasure.\nIt is exquisite, and it leaves one unsatisfied.\nWhat more can one want?",
		"The basis of optimism is sheer terror.",
		"I have grown to love secrecy.\nIt seems to be the one thing that can make modern life mysterious or marvelous to us.\nThe commonest thing is delightful if only one hides it.",
		"I love acting.\nIt is so much more real than life.",
		"What does it profit a man if he gain the whole world and lose his own soul?"
	].ring
$0
endsnippet

snippet "^\s*midi1" "Circuit Midi Note Synth 1" rbA
midi ${1:60}, sustain: ${2:0.1}, channel: 1, port: \$port
$0
endsnippet

snippet "^\s*midi2" "Circuit Midi Note Synth 2" rbA
midi ${1:60}, sustain: ${2:0.1}, channel: 2, port: \$port
$0
endsnippet

snippet "^\s*midic1" "Circuit Midi CC channel 1" rbA
midi_cc ${1:80}, val_f: ${2:1}, channel: 1, port: \$port
$0
endsnippet

snippet "^\s*midic2" "Circuit Midi CC channel 2" rbA
midi_cc ${1:80}, val_f: ${2:1}, channel: 2, port: \$port
$0
endsnippet

snippet "^\s*midicd1" "Circuit Midi CC Delay Synth 1" rbA
# Delay Synth 1
midi_cc 111, ${1:0}, channel: 16, port: \$port
$0
endsnippet

snippet "^\s*midicd2" "Circuit Midi CC Delay Synth 2" rbA
# Delay Synth 2
midi_cc 112, ${1:0}, channel: 16, port: \$port
$0
endsnippet

snippet "^\s*midicf" "Circuit Midi Global Filter" rbA
# Global Filter
midi_cc 74, ${1:65}, channel: 16, port: \$port
# Resonance
midi_cc 71, ${1:30}, channel: 16, port: \$port
$0
endsnippet

snippet "^\s*midicmix" "Circuit Midi Mixer" rbA
live_loop :mixer do
	# Synth 1
	midi_cc 12, ${1:54}, channel: 16, port: \$port
	# Synth 2
	midi_cc 14, ${2:90}, channel: 16, port: \$port
	# Drum 1
	midi_cc 12, ${3:80}, channel: 10, port: \$port
	# Drum 2
	midi_cc 23, ${4:114}, channel: 10, port: \$port
	# Drum 3
	midi_cc 45, ${5:100}, channel: 10, port: \$port
	# Drum 4
	midi_cc 53, ${6:107}, channel: 10, port: \$port
	sleep 0.5
end
$0
endsnippet

snippet "^\s*midicr1" "Circuit Midi CC Reverb Synth 1" rbA
# Reverb Synth 1
midi_cc 88, ${1:64}, channel: 16, port: \$port
$0
endsnippet

snippet "^\s*midicr2" "Circuit Midi CC Reverb Synth 2" rbA
# Reverb Synth 2
midi_cc 89, ${1:64}, channel: 16, port: \$port
$0
endsnippet

snippet "^\s*midid1" "Circuit Drum 1" rbA
# Drum 1 (base drum)
midi 60, vel_f: ${0:1.0}, channel: 10, port: \$port if spread(4, 16).look
endsnippet

snippet "^\s*midid2" "Circuit Drum 2" rbA
# Drum 2 (snare)
midi 62, vel_f: ${0:1.0}, channel: 10, port: \$port if ".... .... .... ....".bools.look
endsnippet

snippet "^\s*midid3" "Circuit Drum 3" rbA
# Drum 3 (closed hats)
midi 64, vel_f: ${0:1.0}, channel: 10, port: \$port if ".... .... .... ....".bools.look
endsnippet

snippet "^\s*midid4" "Circuit Drum 4" rbA
#Drum 4 (open hats)
midi 65, vel_f: ${0:1.0}, channel: 10, port: \$port if ".... .... .... ....".bools.look
endsnippet

snippet "^safari" "Safari Drum Loop" rbA
live_loop :safari, sync: :clock1 do
	sample :loop_safari, beat_stretch: 16, amp: 2
	sleep 16
end
$0
endsnippet
